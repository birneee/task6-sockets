// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sockets {

namespace {

const ::google::protobuf::Descriptor* client_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_msg_OperationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_msg_OperationData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* client_msg_OperationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_client_5fmessage_2eproto() {
  protobuf_AddDesc_client_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_message.proto");
  GOOGLE_CHECK(file != NULL);
  client_msg_descriptor_ = file->message_type(0);
  static const int client_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg, ops_),
  };
  client_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      client_msg_descriptor_,
      client_msg::default_instance_,
      client_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg, _has_bits_[0]),
      -1,
      -1,
      sizeof(client_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg, _internal_metadata_),
      -1);
  client_msg_OperationData_descriptor_ = client_msg_descriptor_->nested_type(0);
  static const int client_msg_OperationData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg_OperationData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg_OperationData, argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg_OperationData, random_data_),
  };
  client_msg_OperationData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      client_msg_OperationData_descriptor_,
      client_msg_OperationData::default_instance_,
      client_msg_OperationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg_OperationData, _has_bits_[0]),
      -1,
      -1,
      sizeof(client_msg_OperationData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_msg_OperationData, _internal_metadata_),
      -1);
  client_msg_OperationType_descriptor_ = client_msg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      client_msg_descriptor_, &client_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      client_msg_OperationData_descriptor_, &client_msg_OperationData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fmessage_2eproto() {
  delete client_msg::default_instance_;
  delete client_msg_reflection_;
  delete client_msg_OperationData::default_instance_;
  delete client_msg_OperationData_reflection_;
}

void protobuf_AddDesc_client_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_client_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024client_message.proto\022\007sockets\"\352\001\n\nclie"
    "nt_msg\022.\n\003ops\030\003 \003(\0132!.sockets.client_msg"
    ".OperationData\032g\n\rOperationData\022/\n\004type\030"
    "\001 \002(\0162!.sockets.client_msg.OperationType"
    "\022\020\n\010argument\030\002 \001(\005\022\023\n\013random_data\030\003 \001(\t\""
    "C\n\rOperationType\022\007\n\003ADD\020\000\022\007\n\003SUB\020\001\022\017\n\013TE"
    "RMINATION\020\002\022\017\n\013RANDOM_DATA\020\003", 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_message.proto", &protobuf_RegisterTypes);
  client_msg::default_instance_ = new client_msg();
  client_msg_OperationData::default_instance_ = new client_msg_OperationData();
  client_msg::default_instance_->InitAsDefaultInstance();
  client_msg_OperationData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fmessage_2eproto {
  StaticDescriptorInitializer_client_5fmessage_2eproto() {
    protobuf_AddDesc_client_5fmessage_2eproto();
  }
} static_descriptor_initializer_client_5fmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* client_msg_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_msg_OperationType_descriptor_;
}
bool client_msg_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const client_msg_OperationType client_msg::ADD;
const client_msg_OperationType client_msg::SUB;
const client_msg_OperationType client_msg::TERMINATION;
const client_msg_OperationType client_msg::RANDOM_DATA;
const client_msg_OperationType client_msg::OperationType_MIN;
const client_msg_OperationType client_msg::OperationType_MAX;
const int client_msg::OperationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int client_msg_OperationData::kTypeFieldNumber;
const int client_msg_OperationData::kArgumentFieldNumber;
const int client_msg_OperationData::kRandomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

client_msg_OperationData::client_msg_OperationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sockets.client_msg.OperationData)
}

void client_msg_OperationData::InitAsDefaultInstance() {
}

client_msg_OperationData::client_msg_OperationData(const client_msg_OperationData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sockets.client_msg.OperationData)
}

void client_msg_OperationData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  argument_ = 0;
  random_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_msg_OperationData::~client_msg_OperationData() {
  // @@protoc_insertion_point(destructor:sockets.client_msg.OperationData)
  SharedDtor();
}

void client_msg_OperationData::SharedDtor() {
  random_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void client_msg_OperationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_msg_OperationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_msg_OperationData_descriptor_;
}

const client_msg_OperationData& client_msg_OperationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmessage_2eproto();
  return *default_instance_;
}

client_msg_OperationData* client_msg_OperationData::default_instance_ = NULL;

client_msg_OperationData* client_msg_OperationData::New(::google::protobuf::Arena* arena) const {
  client_msg_OperationData* n = new client_msg_OperationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void client_msg_OperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.client_msg.OperationData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(client_msg_OperationData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<client_msg_OperationData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(type_, argument_);
    if (has_random_data()) {
      random_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool client_msg_OperationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sockets.client_msg.OperationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sockets.client_msg.OperationType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sockets::client_msg_OperationType_IsValid(value)) {
            set_type(static_cast< ::sockets::client_msg_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_argument;
        break;
      }

      // optional int32 argument = 2;
      case 2: {
        if (tag == 16) {
         parse_argument:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argument_)));
          set_has_argument();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_random_data;
        break;
      }

      // optional string random_data = 3;
      case 3: {
        if (tag == 26) {
         parse_random_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_random_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->random_data().data(), this->random_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sockets.client_msg.OperationData.random_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sockets.client_msg.OperationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sockets.client_msg.OperationData)
  return false;
#undef DO_
}

void client_msg_OperationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sockets.client_msg.OperationData)
  // required .sockets.client_msg.OperationType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 argument = 2;
  if (has_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->argument(), output);
  }

  // optional string random_data = 3;
  if (has_random_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->random_data().data(), this->random_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sockets.client_msg.OperationData.random_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->random_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sockets.client_msg.OperationData)
}

::google::protobuf::uint8* client_msg_OperationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.client_msg.OperationData)
  // required .sockets.client_msg.OperationType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 argument = 2;
  if (has_argument()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->argument(), target);
  }

  // optional string random_data = 3;
  if (has_random_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->random_data().data(), this->random_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sockets.client_msg.OperationData.random_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->random_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.client_msg.OperationData)
  return target;
}

int client_msg_OperationData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.client_msg.OperationData)
  int total_size = 0;

  // required .sockets.client_msg.OperationType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 argument = 2;
    if (has_argument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argument());
    }

    // optional string random_data = 3;
    if (has_random_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->random_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_msg_OperationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sockets.client_msg.OperationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const client_msg_OperationData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const client_msg_OperationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sockets.client_msg.OperationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sockets.client_msg.OperationData)
    MergeFrom(*source);
  }
}

void client_msg_OperationData::MergeFrom(const client_msg_OperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sockets.client_msg.OperationData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_argument()) {
      set_argument(from.argument());
    }
    if (from.has_random_data()) {
      set_has_random_data();
      random_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void client_msg_OperationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sockets.client_msg.OperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_msg_OperationData::CopyFrom(const client_msg_OperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.client_msg.OperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_msg_OperationData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void client_msg_OperationData::Swap(client_msg_OperationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void client_msg_OperationData::InternalSwap(client_msg_OperationData* other) {
  std::swap(type_, other->type_);
  std::swap(argument_, other->argument_);
  random_data_.Swap(&other->random_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata client_msg_OperationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_msg_OperationData_descriptor_;
  metadata.reflection = client_msg_OperationData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int client_msg::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

client_msg::client_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sockets.client_msg)
}

void client_msg::InitAsDefaultInstance() {
}

client_msg::client_msg(const client_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sockets.client_msg)
}

void client_msg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_msg::~client_msg() {
  // @@protoc_insertion_point(destructor:sockets.client_msg)
  SharedDtor();
}

void client_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_msg_descriptor_;
}

const client_msg& client_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fmessage_2eproto();
  return *default_instance_;
}

client_msg* client_msg::default_instance_ = NULL;

client_msg* client_msg::New(::google::protobuf::Arena* arena) const {
  client_msg* n = new client_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void client_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.client_msg)
  ops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool client_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sockets.client_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sockets.client_msg.OperationData ops = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sockets.client_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sockets.client_msg)
  return false;
#undef DO_
}

void client_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sockets.client_msg)
  // repeated .sockets.client_msg.OperationData ops = 3;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ops(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sockets.client_msg)
}

::google::protobuf::uint8* client_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.client_msg)
  // repeated .sockets.client_msg.OperationData ops = 3;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ops(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.client_msg)
  return target;
}

int client_msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.client_msg)
  int total_size = 0;

  // repeated .sockets.client_msg.OperationData ops = 3;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sockets.client_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const client_msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const client_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sockets.client_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sockets.client_msg)
    MergeFrom(*source);
  }
}

void client_msg::MergeFrom(const client_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sockets.client_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ops_.MergeFrom(from.ops_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void client_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sockets.client_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_msg::CopyFrom(const client_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.client_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_msg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ops())) return false;
  return true;
}

void client_msg::Swap(client_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void client_msg::InternalSwap(client_msg* other) {
  ops_.UnsafeArenaSwap(&other->ops_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata client_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_msg_descriptor_;
  metadata.reflection = client_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// client_msg_OperationData

// required .sockets.client_msg.OperationType type = 1;
bool client_msg_OperationData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void client_msg_OperationData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void client_msg_OperationData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void client_msg_OperationData::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::sockets::client_msg_OperationType client_msg_OperationData::type() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.type)
  return static_cast< ::sockets::client_msg_OperationType >(type_);
}
 void client_msg_OperationData::set_type(::sockets::client_msg_OperationType value) {
  assert(::sockets::client_msg_OperationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.type)
}

// optional int32 argument = 2;
bool client_msg_OperationData::has_argument() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void client_msg_OperationData::set_has_argument() {
  _has_bits_[0] |= 0x00000002u;
}
void client_msg_OperationData::clear_has_argument() {
  _has_bits_[0] &= ~0x00000002u;
}
void client_msg_OperationData::clear_argument() {
  argument_ = 0;
  clear_has_argument();
}
 ::google::protobuf::int32 client_msg_OperationData::argument() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.argument)
  return argument_;
}
 void client_msg_OperationData::set_argument(::google::protobuf::int32 value) {
  set_has_argument();
  argument_ = value;
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.argument)
}

// optional string random_data = 3;
bool client_msg_OperationData::has_random_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void client_msg_OperationData::set_has_random_data() {
  _has_bits_[0] |= 0x00000004u;
}
void client_msg_OperationData::clear_has_random_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void client_msg_OperationData::clear_random_data() {
  random_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_random_data();
}
 const ::std::string& client_msg_OperationData::random_data() const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.OperationData.random_data)
  return random_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void client_msg_OperationData::set_random_data(const ::std::string& value) {
  set_has_random_data();
  random_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sockets.client_msg.OperationData.random_data)
}
 void client_msg_OperationData::set_random_data(const char* value) {
  set_has_random_data();
  random_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sockets.client_msg.OperationData.random_data)
}
 void client_msg_OperationData::set_random_data(const char* value, size_t size) {
  set_has_random_data();
  random_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sockets.client_msg.OperationData.random_data)
}
 ::std::string* client_msg_OperationData::mutable_random_data() {
  set_has_random_data();
  // @@protoc_insertion_point(field_mutable:sockets.client_msg.OperationData.random_data)
  return random_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* client_msg_OperationData::release_random_data() {
  // @@protoc_insertion_point(field_release:sockets.client_msg.OperationData.random_data)
  clear_has_random_data();
  return random_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void client_msg_OperationData::set_allocated_random_data(::std::string* random_data) {
  if (random_data != NULL) {
    set_has_random_data();
  } else {
    clear_has_random_data();
  }
  random_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), random_data);
  // @@protoc_insertion_point(field_set_allocated:sockets.client_msg.OperationData.random_data)
}

// -------------------------------------------------------------------

// client_msg

// repeated .sockets.client_msg.OperationData ops = 3;
int client_msg::ops_size() const {
  return ops_.size();
}
void client_msg::clear_ops() {
  ops_.Clear();
}
const ::sockets::client_msg_OperationData& client_msg::ops(int index) const {
  // @@protoc_insertion_point(field_get:sockets.client_msg.ops)
  return ops_.Get(index);
}
::sockets::client_msg_OperationData* client_msg::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:sockets.client_msg.ops)
  return ops_.Mutable(index);
}
::sockets::client_msg_OperationData* client_msg::add_ops() {
  // @@protoc_insertion_point(field_add:sockets.client_msg.ops)
  return ops_.Add();
}
::google::protobuf::RepeatedPtrField< ::sockets::client_msg_OperationData >*
client_msg::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:sockets.client_msg.ops)
  return &ops_;
}
const ::google::protobuf::RepeatedPtrField< ::sockets::client_msg_OperationData >&
client_msg::ops() const {
  // @@protoc_insertion_point(field_list:sockets.client_msg.ops)
  return ops_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sockets

// @@protoc_insertion_point(global_scope)
