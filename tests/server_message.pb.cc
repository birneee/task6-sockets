// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sockets {

namespace {

const ::google::protobuf::Descriptor* server_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_msg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_server_5fmessage_2eproto() {
  protobuf_AddDesc_server_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_message.proto");
  GOOGLE_CHECK(file != NULL);
  server_msg_descriptor_ = file->message_type(0);
  static const int server_msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_msg, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_msg, total_bytes_),
  };
  server_msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      server_msg_descriptor_,
      server_msg::default_instance_,
      server_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_msg, _has_bits_[0]),
      -1,
      -1,
      sizeof(server_msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_msg, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      server_msg_descriptor_, &server_msg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fmessage_2eproto() {
  delete server_msg::default_instance_;
  delete server_msg_reflection_;
}

void protobuf_AddDesc_server_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_server_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024server_message.proto\022\007sockets\"1\n\nserve"
    "r_msg\022\016\n\006result\030\001 \002(\005\022\023\n\013total_bytes\030\002 \002"
    "(\003", 82);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_message.proto", &protobuf_RegisterTypes);
  server_msg::default_instance_ = new server_msg();
  server_msg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fmessage_2eproto {
  StaticDescriptorInitializer_server_5fmessage_2eproto() {
    protobuf_AddDesc_server_5fmessage_2eproto();
  }
} static_descriptor_initializer_server_5fmessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int server_msg::kResultFieldNumber;
const int server_msg::kTotalBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

server_msg::server_msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sockets.server_msg)
}

void server_msg::InitAsDefaultInstance() {
}

server_msg::server_msg(const server_msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sockets.server_msg)
}

void server_msg::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  total_bytes_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_msg::~server_msg() {
  // @@protoc_insertion_point(destructor:sockets.server_msg)
  SharedDtor();
}

void server_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_msg_descriptor_;
}

const server_msg& server_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fmessage_2eproto();
  return *default_instance_;
}

server_msg* server_msg::default_instance_ = NULL;

server_msg* server_msg::New(::google::protobuf::Arena* arena) const {
  server_msg* n = new server_msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void server_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.server_msg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(server_msg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<server_msg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_bytes_, result_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool server_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sockets.server_msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_bytes;
        break;
      }

      // required int64 total_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sockets.server_msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sockets.server_msg)
  return false;
#undef DO_
}

void server_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sockets.server_msg)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int64 total_bytes = 2;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sockets.server_msg)
}

::google::protobuf::uint8* server_msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.server_msg)
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int64 total_bytes = 2;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.server_msg)
  return target;
}

int server_msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sockets.server_msg)
  int total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_total_bytes()) {
    // required int64 total_bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes());
  }

  return total_size;
}
int server_msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.server_msg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required int64 total_bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sockets.server_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const server_msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const server_msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sockets.server_msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sockets.server_msg)
    MergeFrom(*source);
  }
}

void server_msg::MergeFrom(const server_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sockets.server_msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void server_msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sockets.server_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_msg::CopyFrom(const server_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.server_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_msg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void server_msg::Swap(server_msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server_msg::InternalSwap(server_msg* other) {
  std::swap(result_, other->result_);
  std::swap(total_bytes_, other->total_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata server_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_msg_descriptor_;
  metadata.reflection = server_msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// server_msg

// required int32 result = 1;
bool server_msg::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void server_msg::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void server_msg::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void server_msg::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 server_msg::result() const {
  // @@protoc_insertion_point(field_get:sockets.server_msg.result)
  return result_;
}
 void server_msg::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:sockets.server_msg.result)
}

// required int64 total_bytes = 2;
bool server_msg::has_total_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void server_msg::set_has_total_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void server_msg::clear_has_total_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void server_msg::clear_total_bytes() {
  total_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_total_bytes();
}
 ::google::protobuf::int64 server_msg::total_bytes() const {
  // @@protoc_insertion_point(field_get:sockets.server_msg.total_bytes)
  return total_bytes_;
}
 void server_msg::set_total_bytes(::google::protobuf::int64 value) {
  set_has_total_bytes();
  total_bytes_ = value;
  // @@protoc_insertion_point(field_set:sockets.server_msg.total_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sockets

// @@protoc_insertion_point(global_scope)
